profiles {
    apocrita {
        params {
            max_memory = 362.GB
            max_cpus   = 32
            max_time   = 240.h
        }
        executor {
            name            = 'sge'
            queueSize       = 95 // Allowing 5 pipelines to run simultaneously
            submitRateLimit = '5 sec'
        }
        apptainer.runOptions = "-B /data"
        process {
            penv           = 'smp'
            clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.mega / task.cpus)}M" }
            errorStrategy  = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
            maxRetries     = 3

            cpus   = { check_max( 1    * task.attempt,             'cpus'   ) }
            memory = { check_max( 6.GB * task.attempt,             'memory' ) }
            time   = { check_max( task.attempt == 1 ? 1.h : 240.h, 'time'   ) }
            withLabel:process_single {
                cpus   = { check_max( 1                  ,             'cpus'    ) }
                memory = { check_max( 6.GB * task.attempt,             'memory'  ) }
                time   = { check_max( task.attempt == 1 ? 1.h : 240.h, 'time'    ) }
            }
            withLabel:process_low {
                cpus   = { check_max( 2     * task.attempt,            'cpus'    ) }
                memory = { check_max( 12.GB * task.attempt,            'memory'  ) }
                time   = { check_max( task.attempt == 1 ? 1.h : 240.h, 'time'    ) }
            }
            withLabel:process_medium {
                cpus   = { check_max( 3     * task.attempt,            'cpus'    ) }
                memory = { check_max( 18.GB * task.attempt,            'memory'  ) }
                time   = { check_max( task.attempt == 1 ? 1.h : 240.h, 'time'    ) }
            }
            withLabel:process_high {
                cpus   = { check_max( 4    * task.attempt,             'cpus'    ) }
                memory = { check_max( 24.GB * task.attempt,            'memory'  ) }
                time   = { check_max( task.attempt == 1 ? 1.h : 240.h, 'time'    ) }
            }
            withLabel:process_long {
                time   = { check_max( 240.h, 'time' ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( 48.GB * task.attempt, 'memory' ) }
            }
            withName:'BCFTOOLS_STATS|SAMTOOLS_FLAGSTAT' {
                memory = { check_max(  1.GB * task.attempt, 'memory' ) }
            }
            withName:'MULTIQC|GATK4_ADDORREPLACEREADGROUPS|BCFTOOLS_CONCAT' {
                memory = { check_max(  2.GB * task.attempt, 'memory' ) }
            }
            withName:'SAMTOOLS_INDEX|SAMTOOLS_MERGE' {
                memory = { check_max(  1.GB * task.attempt, 'memory' ) }
            }
            withName:BCFTOOLS_SORT {
                cpus   = { check_max(  2    * task.attempt, 'cpus'   ) }
                memory = { check_max(  2.GB * task.attempt, 'memory' ) }
            }
            withName:MOSDEPTH {
                cpus   = { check_max(  2    * task.attempt, 'cpus'   ) }
                memory = { check_max(  4.GB * task.attempt, 'memory' ) }
            }
            withName:FREEBAYES {
                cpus   = { check_max(  2    * task.attempt, 'cpus'   ) }
                memory = { check_max(  2.GB * task.attempt, 'memory' ) }
            }
            withName:BCFTOOLS_MPILEUP {
                memory = { check_max(  2.GB * task.attempt, 'memory' ) }
            }
            withName:GATK4_HAPLOTYPECALLER {
                cpus   = { check_max( 2     * task.attempt, 'cpus'   ) }
                memory = { check_max( 15.GB * task.attempt, 'memory' ) }
            }
            withName:BIOBAMBAM_BAMSORMADUP {
                memory = { check_max( 15.GB * task.attempt, 'memory' ) }
            }
            withName:FASTP {
                memory = { check_max(  5.GB * task.attempt, 'memory' ) }
            }
            withName:FASTQC {
                memory = { check_max(  9.GB * task.attempt, 'memory' ) }
            }
            withName:SEQKIT_SPLIT2 {
                memory = { check_max(  1.GB * task.attempt, 'memory' ) }
            }
            withName:BWA_MEM {
                memory = { check_max( 20.GB * task.attempt, 'memory' ) }
            }
            withName:DUMMY {
                memory = { check_max(  1.GB,                'memory' ) }
            }
        }
    }
}
