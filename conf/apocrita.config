profiles {
    apocrita {
        params {
            max_memory = 362.GB
            max_cpus   = 32
            max_time   = 240.h
        }
        executor {
            name            = 'sge'
            queueSize       = 95 // Allowing 5 pipelines to run simultaneously
            submitRateLimit = '5 sec'
        }
        apptainer.runOptions = "-B /data"
        process {
            penv           = 'smp'
            clusterOptions = { "-S /bin/bash -l h_vmem=${(task.memory.mega / task.cpus)}M" }
            errorStrategy  = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
            maxRetries     = 3

            cpus   = { check_max( 1,                                'cpus'   ) }
            memory = { check_max( task.attempt >  2 ? 9.GB : 6.GB,  'memory' ) }
            time   = { check_max( task.attempt == 1 ? 1.h  : 240.h, 'time'   ) }
            withLabel:process_single {
                cpus   = { check_max( 1,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 9.GB  : 6.GB,  'memory' ) }
                time   = { check_max( task.attempt == 1 ? 1.h   : 240.h, 'time'   ) }
            }
            withLabel:process_low {
                cpus   = { check_max( 2,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 18.GB : 12.GB, 'memory' ) }
                time   = { check_max( task.attempt == 1 ? 1.h   : 240.h, 'time'   ) }
            }
            withLabel:process_medium {
                cpus   = { check_max( 3,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 27.GB : 18.GB, 'memory' ) }
                time   = { check_max( task.attempt == 1 ? 1.h   : 240.h, 'time'   ) }
            }
            withLabel:process_high {
                cpus   = { check_max( 4,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 36.GB : 24.GB, 'memory' ) }
                time   = { check_max( task.attempt == 1 ? 1.h   : 240.h, 'time'   ) }
            }
            withLabel:process_long {
                time   = { check_max( 240.h,                             'time'   ) }
            }
            withLabel:process_high_memory {
                memory = { check_max( task.attempt >  2 ? 96.GB : 48.GB, 'memory' ) }
            }
            withName:'SEQKIT_SPLIT2|BCFTOOLS_INDEX|BCFTOOLS_STATS|SAMTOOLS_FLAGSTAT|SAMTOOLS_INDEX|SAMTOOLS_MERGE' {
                memory = { check_max( task.attempt >  2 ? 2.GB  : 1.GB,  'memory' ) }
            }
            withName:'MULTIQC|GATK4_ADDORREPLACEREADGROUPS|BCFTOOLS_CONCAT|BCFTOOLS_MPILEUP' {
                memory = { check_max( task.attempt >  2 ? 4.GB  : 2.GB,  'memory' ) }
            }
            withName:'BCFTOOLS_SORT|FREEBAYES' {
                cpus   = { check_max( 2,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 4.GB  : 2.GB,  'memory' ) }
            }
            withName:MOSDEPTH {
                cpus   = { check_max( 2,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 8.GB  : 4.GB,  'memory' ) }
            }
            withName:GATK4_HAPLOTYPECALLER {
                cpus   = { check_max( 2,                                 'cpus'   ) }
                memory = { check_max( task.attempt >  2 ? 30.GB : 15.GB, 'memory' ) }
            }
            withName:BIOBAMBAM_BAMSORMADUP {
                memory = { check_max( task.attempt >  2 ? 30.GB : 15.GB, 'memory' ) }
            }
            withName:FASTP {
                memory = { check_max( task.attempt >  2 ? 10.GB :  5.GB, 'memory' ) }
            }
            withName:FASTQC {
                memory = { check_max( task.attempt >  2 ? 18.GB :  9.GB, 'memory' ) }
            }
            withName:BWA_MEM {
                memory = { check_max( task.attempt >  2 ? 30.GB : 20.GB, 'memory' ) }
            }
            withName:'DUMMY|DUMMY1|DUMMY2' {
                memory = { check_max( 1.GB,                              'memory' ) }
            }
        }
    }
}
